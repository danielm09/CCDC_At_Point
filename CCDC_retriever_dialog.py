# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ChangeDetectionDialog
                                 A QGIS plugin
 Retrives CCDC's information and plot chart for a given point.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-04-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Daniel Moraes
        email                : moraesd90@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtGui import QColor
from qgis.PyQt.QtCore import QUrl, pyqtSignal, Qt, QDate, QCoreApplication
from qgis.core import QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsProject, QgsPointXY
from qgis.gui import QgsMapTool, QgsMapToolPan, QgsVertexMarker
from qgis.utils import iface

from ccdc_retriever.core import main


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'CCDC_retriever_dialog_base.ui'))


class ChangeDetectionDialog(QtWidgets.QDialog, FORM_CLASS):
    closingPlugin = pyqtSignal()
    
    def __init__(self, parent=None):
        """Constructor."""
        super(ChangeDetectionDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.default_point_tool = QgsMapToolPan(iface.mapCanvas())
        iface.mapCanvas().setMapTool(self.default_point_tool, clean=True)

        #set bands combobox (breakpointbands)
        #self.breakpointbands_box.setItemCheckState(2,Qt.Checked) #check B3
        #self.breakpointbands_box.setItemCheckState(11,Qt.Checked) #check B12
        #self.breakpointbands_box.setItemCheckState(12,Qt.Checked) #check ndvi
        #set bands combobox (tmaskbands)
        #self.tmaskbands_box.setItemCheckState(2,Qt.Checked) #check B3
        #self.tmaskbands_box.setItemCheckState(11,Qt.Checked) #check B12

        #enable/disable breakpointbands and tmaskbands according to select img collection
        #assume the default selection is Sentinel-2. Populate list with S2 bands
        bands_s2 = ['ndvi','B2','B3','B4','B5','B6','B7','B8','B8A','B11','B12']
        bands_ls = ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']
        for band in bands_s2:
            #add bands to breakpointbands
            if band=='ndvi': self.breakpointbands_box.addItemWithCheckState(band,Qt.Checked)
            else: self.breakpointbands_box.addItemWithCheckState(band,Qt.Unchecked)
            #add bands to tmaskbands
            self.tmaskbands_box.addItemWithCheckState(band,Qt.Unchecked)
            #add bands to band_to_plot
            self.band_to_plot_box.addItem(band)

        #enable/disable cloud masks according to selected img collection
        #assume the default selection is Sentinel-2 and disable Landsat QA mask option
        self.cloud_filter_box.model().item(2).setEnabled(False)

        
        #function to disable/enable combobox options according to collection
        def changeCloudFilterAndBands():

            
            if self.collection_name_box.currentText()=='Sentinel-2':
                #change cloud filter
                self.cloud_filter_box.setCurrentIndex(0)
                self.cloud_filter_box.model().item(0).setEnabled(True)
                self.cloud_filter_box.model().item(1).setEnabled(True)
                self.cloud_filter_box.model().item(2).setEnabled(True)
                self.cloud_filter_box.model().item(3).setEnabled(True)
                self.cloud_filter_box.model().item(2).setEnabled(False)
                
                #change breakpointbands and tmaskbands
                self.breakpointbands_box.clear() #delete all items
                self.tmaskbands_box.clear() #delete all items
                for band in bands_s2:
                    #add bands to breakpointbands
                    if band=='ndvi': self.breakpointbands_box.addItemWithCheckState(band,Qt.Checked)
                    else: self.breakpointbands_box.addItemWithCheckState(band,Qt.Unchecked)
                    #add bands to tmaskbands
                    self.tmaskbands_box.addItemWithCheckState(band,Qt.Unchecked)
                    
                #change band_to_plot_box
                self.band_to_plot_box.clear() #delete all items
                for band in bands_s2:
                    self.band_to_plot_box.addItem(band)
                self.band_to_plot_box.setCurrentIndex(0)
                
            if self.collection_name_box.currentText() in ['Landsat col. 1', 'Landsat col. 2']:
                #change cloud filter
                self.cloud_filter_box.setCurrentIndex(2)
                self.cloud_filter_box.model().item(2).setEnabled(True)
                self.cloud_filter_box.model().item(0).setEnabled(False)
                self.cloud_filter_box.model().item(1).setEnabled(False)
                self.cloud_filter_box.model().item(3).setEnabled(False)
                
                #change breakpointbands and tmaskbands
                self.breakpointbands_box.clear() #delete all items
                self.tmaskbands_box.clear() #delete all items
                for band in bands_ls:
                    #add bands to breakpointbands
                    self.breakpointbands_box.addItemWithCheckState(band,Qt.Checked)
                    #add bands to tmask
                    self.tmaskbands_box.addItemWithCheckState(band,Qt.Unchecked)
                    
                #change band_to_plot_box
                self.band_to_plot_box.clear() #delete all items
                for band in bands_ls:
                    self.band_to_plot_box.addItem(band)
                self.band_to_plot_box.setCurrentIndex(0)

        #run function when collection is changed
        self.collection_name_box.currentIndexChanged.connect(changeCloudFilterAndBands)

        #enable/disable bands to plot, depending on the bands selected as breakpointbands
        #assume default selection is ndvi
        for i in range(self.band_to_plot_box.count()):
            if i not in [0]:
                self.band_to_plot_box.model().item(i).setEnabled(False)

        
        def changeBandsToPlot():
            #get items and indices in the combobox
            items_breakpointbands_box = [self.breakpointbands_box.itemText(i) for i in range(self.breakpointbands_box.count())]
            dict_items_indices = {items_breakpointbands_box[i]:i for i in range(len(items_breakpointbands_box))}
            #get selected items in breakpointbands_box
            bpb_selected_items = self.breakpointbands_box.checkedItems()
            print(bpb_selected_items)
            #get their indices
            selected_indices = [dict_items_indices[i] for i in bpb_selected_items]
            #disabled elements of band_to_plot_box that are not among selected items in breakpointbands_box
            for i in range(self.band_to_plot_box.count()):
                if i not in selected_indices:
                    self.band_to_plot_box.model().item(i).setEnabled(False)
                else:
                    self.band_to_plot_box.model().item(i).setEnabled(True)
                
        #run function when breakpointbands is changed
        self.breakpointbands_box.checkedItemsChanged.connect(changeBandsToPlot) #seems to be working only with QGIS 3.20 or newer        
        
        #pick coordinates on map
        self.pickCoordinatesButton.clicked.connect(self.coordinates_from_map)

        #generate chart on button click
        self.generateChartButton.clicked.connect(self.makePlot)

    


    def closeEvent(self, event):
        # close
        self.closingPlugin.emit()
        event.accept()

    def coordinates_from_map(self):
        # minimize the plugin dialog
        self.setWindowState(Qt.WindowMinimized)
        # raise qgis window
        qgis_window = iface.mainWindow()
        qgis_window.raise_()
        qgis_window.setWindowState(qgis_window.windowState() & ~Qt.WindowMinimized | Qt.WindowActive)
        qgis_window.activateWindow()

        # set the map tool and actions
        iface.mapCanvas().setMapTool(PickerCoordsOnMap(self), clean=True)


    def makePlot(self):

        lon = self.longitude.value()
        lat = self.latitude.value()
        coords = [lon,lat]

        #get date range
        date_start = self.start_date.date().toString('yyyy-MM-dd')
        date_end = self.end_date.date().toString('yyyy-MM-dd')

        #get collection name
        collection_name = self.collection_name_box.currentText()

        #get band to plot
        band_to_plot = self.band_to_plot_box.currentText()

        #get cloud filter
        cloud_filter = self.cloud_filter_box.currentText()

        #get breakpointbands
        breakpointbands = self.breakpointbands_box.checkedItems()
        if len(breakpointbands)==0:
            QMessageBox.critical(self, "Error", "Please select at least one break point band")
            return
        
        #get tmask bands
        tmask = self.tmaskbands_box.checkedItems()
        if len(tmask)==0:
            tmask = None
        else:
            if not set(tmask).issubset(set(breakpointbands)):
                QMessageBox.warning(self, "Attention", "Tmask bands should be included in break point bands.\nInclude and try again")
                return
        
        #get lambda, chi, minYears and numObs
        Lambda = self.lambda_box.value()
        chi = self.chi_box.value()
        minYears = self.minYears_box.value()
        numObs = self.numObs_box.value()

        #call function to make plot
        main.executeProcessing(collection_name,coords, date_start, date_end, cloud_filter,
                               breakpointbands, band_to_plot,breakpointbands, tmask, numObs, chi, minYears, Lambda)
        

        


class PickerCoordsOnMap(QgsMapTool):
    marker = None

    def __init__(self, dialog):
        QgsMapTool.__init__(self, iface.mapCanvas())
        self.dialog = dialog

    @staticmethod
    def delete_marker():
        if PickerCoordsOnMap.marker:
            iface.mapCanvas().scene().removeItem(PickerCoordsOnMap.marker)
            PickerCoordsOnMap.marker = None

    @staticmethod
    def create_marker(point):
        # remove the previous marker
        PickerCoordsOnMap.delete_marker()
        # create a marker
        marker = QgsVertexMarker(iface.mapCanvas())
        marker.setCenter(point)
        marker.setColor(QColor("red"))
        marker.setIconSize(25)
        marker.setIconType(QgsVertexMarker.ICON_CIRCLE)
        marker.setPenWidth(4)
        PickerCoordsOnMap.marker = marker

    def canvasPressEvent(self, event):
        if event.button() == Qt.LeftButton:
            point = iface.mapCanvas().getCoordinateTransform().toMapCoordinates(event.pos().x(), event.pos().y())
            self.create_marker(point)
            # transform coordinates to WGS84
            crsSrc = iface.mapCanvas().mapSettings().destinationCrs()
            crsDest = QgsCoordinateReferenceSystem(4326)
            xform = QgsCoordinateTransform(crsSrc, crsDest, QgsProject.instance())
            point = xform.transform(point)

            self.dialog.longitude.setValue(point.x())
            self.dialog.latitude.setValue(point.y())


            self.finish()

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.finish()

    def finish(self):
        iface.mapCanvas().unsetMapTool(self)
        iface.mapCanvas().setMapTool(self.dialog.default_point_tool)
        self.dialog.raise_()
        self.dialog.setWindowState(self.dialog.windowState() & ~Qt.WindowMinimized | Qt.WindowActive)
        self.dialog.activateWindow()
        
        
